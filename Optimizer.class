package okh;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Random;

public class Optimizer {
	int[][] timeslotHillClimbing, timeslotSimulatedAnnealing, timeslotTabuSearch, initialTimeslot, conflict_matrix, course_sorted;
	int[] timeslot;
	double[] tabuSearchPenaltyList1;
	String file;
	int jumlahexam, jumlahmurid, randomCourse, randomTimeslot, iterasi;
	double initialPenalty, bestPenalty, deltaPenalty, penaltyHB, deltaPenaltyHB;
	
	Schedule schedule;
	
	Optimizer(String file, int[][] conflict_matrix, int[][] course_sorted, int jumlahexam, int jumlahmurid, int iterasi) { 
		this.file = file; 
		this.conflict_matrix = conflict_matrix;
		this.course_sorted = course_sorted;
		this.jumlahexam = jumlahexam;
		this.jumlahmurid = jumlahmurid;
		this.iterasi = iterasi;
	}
	
	public void getTimeslotByHillClimbing() throws IOException {
            schedule = new Schedule(file, conflict_matrix, jumlahexam);
            timeslot = schedule.schedulingByDegree(course_sorted);

            int[][] initialTimeslot = schedule.getSchedule(); // get initial solution
            timeslotHillClimbing = Evaluator.getTimeslot(initialTimeslot);
            initialPenalty = Evaluator.getPenalty(conflict_matrix, initialTimeslot, jumlahmurid);

            int[][] timeslotHillClimbingSementara = Evaluator.getTimeslot(timeslotHillClimbing); // handle temporary solution. if better than feasible, replace initial

            bestPenalty = Evaluator.getPenalty(conflict_matrix, timeslotHillClimbing, jumlahmurid);

            for(int i = 0; i < iterasi; i++) {
                    try {
                            randomCourse = random(jumlahexam); // random course
                            randomTimeslot = random(schedule.getTotalTimeslots(initialTimeslot)); // random timeslot

                            if (Schedule.checkRandomTimeslot(randomCourse, randomTimeslot, conflict_matrix, timeslotHillClimbingSementara)) {	
                                    timeslotHillClimbingSementara[randomCourse][1] = randomTimeslot;
                                    double penaltiAfterHillClimbing = Evaluator.getPenalty(conflict_matrix, timeslotHillClimbingSementara, jumlahmurid);

                                    // compare between penalti. replace bestPenalty with penaltiAfterHillClimbing if initial penalti is greater
                                    if(bestPenalty > penaltiAfterHillClimbing) {
                                            bestPenalty = Evaluator.getPenalty(conflict_matrix, timeslotHillClimbingSementara, jumlahmurid);
                                            timeslotHillClimbing[randomCourse][1] = timeslotHillClimbingSementara[randomCourse][1];
                                    } 
                                            else 
                                                    timeslotHillClimbingSementara[randomCourse][1] = timeslotHillClimbing[randomCourse][1];
                            }
                            System.out.println("Iterasi " + (i+1) + " Penalti : "+ bestPenalty);
                    }
                            catch (ArrayIndexOutOfBoundsException e) {
                                    //System.out.println("randomCourseIndex index ke- " + randomCourseIndex);
                                    //System.out.println("randomTimeslot index ke- " + randomTimeslot);
                            }

            }

            deltaPenalty = ((initialPenalty-bestPenalty)/initialPenalty)*100;

            System.out.println("=============================================================");
            System.out.println("		Metode HILL CLIMBING								 ");
            System.out.println("\nPenalti Initial       : "+ initialPenalty);
            System.out.println("Penalti Terbaik       : "+ bestPenalty);
            System.out.println("Peningkatan Penalti   : " + deltaPenalty + " % dari Initial Solution");
            System.out.println("Jumlah Timeslot       : " + schedule.getTotalTimeslots(timeslotHillClimbing) + "\n");
            System.out.println("=============================================================");	
	}
        
        public void getTimeslotBySimulatedAnnealing(double temperature) {
            double coolingrate = 0.1;
            schedule = new Schedule(file, conflict_matrix, jumlahexam);
            timeslot = schedule.schedulingByDegree(course_sorted);
            LowLevelHeuristics lowLevelHeuristics = new LowLevelHeuristics(conflict_matrix);

            // initial solution
            timeslotSimulatedAnnealing = schedule.getSchedule();
            initialPenalty = Evaluator.getPenalty(conflict_matrix, timeslotSimulatedAnnealing, jumlahmurid);

            int[][] timeslotSimulatedAnnealingSementara = Evaluator.getTimeslot(timeslotSimulatedAnnealing);

            for	(int i=0; i < iterasi; i++) {
                    int llh = randomNumber(1, 5);
                    int[][] timeslotLLH;
                    switch (llh) {
                            case 1:
                                    timeslotLLH = lowLevelHeuristics.move1(timeslotSimulatedAnnealingSementara);
                                    break;
                            case 2:
                                    timeslotLLH = lowLevelHeuristics.swap2(timeslotSimulatedAnnealingSementara);
                                    break;
                            case 3:
                                    timeslotLLH = lowLevelHeuristics.move2(timeslotSimulatedAnnealingSementara);
                                    break;
                            case 4:
                                    timeslotLLH = lowLevelHeuristics.swap3(timeslotSimulatedAnnealingSementara);
                                    break;
                            case 5:
                                    timeslotLLH = lowLevelHeuristics.move3(timeslotSimulatedAnnealingSementara);
                                    break;
                            default:
                                    timeslotLLH = lowLevelHeuristics.move1(timeslotSimulatedAnnealingSementara);
                                    break;
                    }

                    System.out.println("Suhu : " + temperature);
                    if (Evaluator.getPenalty(conflict_matrix, timeslotLLH, jumlahmurid) <= Evaluator.getPenalty(conflict_matrix, timeslotSimulatedAnnealingSementara, jumlahmurid)) {
                            timeslotSimulatedAnnealingSementara = Evaluator.getTimeslot(timeslotLLH);
                            if (Evaluator.getPenalty(conflict_matrix, timeslotLLH, jumlahmurid) <= Evaluator.getPenalty(conflict_matrix, timeslotSimulatedAnnealing, jumlahmurid)) {
                                    timeslotSimulatedAnnealing = Evaluator.getTimeslot(timeslotLLH);
                                    bestPenalty = Evaluator.getPenalty(conflict_matrix, timeslotSimulatedAnnealing, jumlahmurid);
                            }
                    }
                            else if (acceptanceProbability(Evaluator.getPenalty(conflict_matrix, timeslotSimulatedAnnealingSementara, jumlahmurid), Evaluator.getPenalty(conflict_matrix, timeslotLLH, jumlahmurid), temperature) > Math.random())
                                    timeslotSimulatedAnnealingSementara = Evaluator.getTimeslot(timeslotLLH);
                    // print current penalty of each iteration
                    System.out.println("Iterasi " + (i+1) + " Penalti : " + Evaluator.getPenalty(conflict_matrix, timeslotSimulatedAnnealingSementara, jumlahmurid));
                    temperature = temperature - coolingrate;
            }
            penaltyHB = Evaluator.getPenalty(conflict_matrix, timeslotHillClimbing, jumlahmurid);
            deltaPenaltyHB = ((penaltyHB-bestPenalty)/penaltyHB)*100;
            deltaPenalty = ((initialPenalty-bestPenalty)/initialPenalty)*100;
            System.out.println("=============================================================");
            System.out.println("		Metode SIMULATED ANNEALING				 			 ");
            System.out.println("\nPenalti Initial       : "+ initialPenalty);
            System.out.println("Penalti Hill Climbing : "+ penaltyHB); 
            System.out.println("Penalti Terbaik       : " + bestPenalty);
            System.out.println("Peningkatan Penalti   : " + deltaPenalty + " % dari Initial Solution");
            System.out.println("Peningkatan Penalti   : " + deltaPenaltyHB + " % dari Hill Climbing");
            System.out.println("Jumlah Timeslot       : " + schedule.getTotalTimeslots(timeslotSimulatedAnnealing) + "\n");
            System.out.println("=============================================================");
	}
	
	// return timeslot each algorithm
	public int[][] getTimeslotHillClimbing() { return timeslotHillClimbing; }
        public int[][] getTimeslotSimulatedAnnealing() { return timeslotSimulatedAnnealing; }
	
	// return timeslot each algorithm
	public int getJumlahTimeslotHC() { return schedule.getTotalTimeslots(timeslotHillClimbing); }
        public int getJumlahTimeslotSimulatedAnnealing() { return schedule.getTotalTimeslots(timeslotSimulatedAnnealing); }
		
	private static int randomNumber(int min, int max) {
		Random random = new Random();
		return random.nextInt(max - min) + min;
	}
	
	private static double randomDouble() {
		Random r = new Random();
		return r.nextInt(1000) / 1000.0;
	}
	private static int random(int number) {
		Random random = new Random();
		return random.nextInt(number);
	}
	
	private static double acceptanceProbability(double penaltySementara, double penaltyLLH, double temperature) {
		return Math.exp((penaltySementara - penaltyLLH) / temperature);
	}
}
